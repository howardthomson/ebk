note
	description	: "GUI for 'ebk' -- the Eiffel Backup system"
	generated	: "Generated by the New Vision2 Application Wizard."
	author		: "Howard Thomson"
	date		: "$Date: 2011/2/6 9:42:59 $"
	revision	: "1.0.0"

	TODO: "[
		Need an add_directory_dialog that communicates with the, possibly remote, file daemon, so that the
		generated directory root is appropriate for the specified client ...
	]"

class
	EBK_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

create
	default_create

feature {NONE} -- Implementation / Constants

	Window_title: STRING = "ebk"
			-- Title of the window.

	Window_width: INTEGER = 400
			-- Initial width for this window.

	Window_height: INTEGER = 400
			-- Initial height for this window.

feature -- Attributes

	efb_tree: EFB_FILE_TREE

	timeout: EV_TIMEOUT

feature -- Non GUI code ...

	add_root_dialogue
			-- Directory dialogue to add a root to the list
		local
			l_dialog: EV_DIRECTORY_DIALOG
			l_root: STRING_32
		do
			create l_dialog
			l_dialog.show_modal_to_window (Current)
			l_root := l_dialog.directory
			if l_root.count /= 0 then
				efb_tree.add_root (l_root)
			end
		end

	scan_roots
			-- Start the scanning process
		local
			l_app: EV_APPLICATION
		do
			-- TODO
			efb_tree.scan_files
			standard_status_label.set_text ("Done ...")
		end

	report_filepath (a_path: EFB_PATH_COMPONENT; a_path_status: FILE_INFO)
		local
			l_filename: STRING
			l_tree_item: EV_TREE_ITEM
			l_colour: EV_COLOR
			l_pixmap: EV_PIXMAP
		do
			l_filename := a_path.filename
			io.output.put_string (l_filename); io.output.put_new_line
			
--			last_filename := l_filename
--			create l_tree_item.make_with_text (l_filename)
--			create l_pixmap.make_with_size (10, 10)
--			create l_colour.make_with_8_bit_rgb (255, 0, 0)
--			l_pixmap.set_background_color (l_colour)
--			l_pixmap.clear
--			l_tree_item.set_pixmap (l_pixmap)
--			root_tree.extend (l_tree_item)
		end

feature {NONE} -- GUI Initialization

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

				-- Create and add the menu bar.
			build_standard_menu_bar
			set_menu_bar (standard_menu_bar)

				-- Create and add the toolbar.
		--	build_standard_toolbar
		--	upper_bar.extend (create {EV_HORIZONTAL_SEPARATOR})
		--	upper_bar.extend (standard_toolbar)

				-- Create and add the status bar.
			build_standard_status_bar
		--	lower_bar.extend (standard_status_bar)

			build_main_container
			extend (main_container)

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window
			set_title (Window_title)

				-- Set the initial size of the window
			set_size (Window_width, Window_height)

			set_position (100, 100)

			create efb_tree.make
			efb_tree.set_report_agent (agent report_filepath)

			create timeout.make_with_interval (1000)
			timeout.actions.extend (agent timeout_action)
		end

	last_filename: STRING
	last_reported_filename: STRING

	timeout_action
		do
		--	print ("Timeout occurred ...%N")
			if last_filename /= last_reported_filename then
				standard_status_label.set_text (last_filename)
				last_reported_filename := last_filename
			end
		end

	is_in_default_state: BOOLEAN
			-- Is the window in its default state
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end


feature {NONE} -- Menu Implementation

	standard_menu_bar: EV_MENU_BAR
			-- Standard menu bar for this window.

	file_menu: EV_MENU
			-- "File" menu for this window (contains New, Open, Close, Exit...)

	help_menu: EV_MENU
			-- "Help" menu for this window (contains About...)

	build_standard_menu_bar
			-- Create and populate `standard_menu_bar'.
		require
			menu_bar_not_yet_created: standard_menu_bar = Void
		do
				-- Create the menu bar.
			create standard_menu_bar

				-- Add the "File" menu
			build_file_menu
			standard_menu_bar.extend (file_menu)

				-- Add the "Help" menu
			build_help_menu
			standard_menu_bar.extend (help_menu)
		ensure
			menu_bar_created:
				standard_menu_bar /= Void and then
				not standard_menu_bar.is_empty
		end

	build_file_menu
			-- Create and populate `file_menu'.
		require
			file_menu_not_yet_created: file_menu = Void
		local
			menu_item: EV_MENU_ITEM
		do
			create file_menu.make_with_text (Menu_file_item)

			create menu_item.make_with_text (Menu_file_add_item)
			menu_item.select_actions.extend (agent add_root_dialogue)
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_scan_item)

			menu_item.select_actions.extend (agent scan_roots)
			file_menu.extend (menu_item)

			file_menu.extend (create {EV_MENU_SEPARATOR})

				-- Create the File/Exit menu item and make it call
				-- `request_close_window' when it is selected.
			create menu_item.make_with_text (Menu_file_exit_item)
			menu_item.select_actions.extend (agent request_close_window)
			file_menu.extend (menu_item)
		ensure
			file_menu_created: file_menu /= Void and then not file_menu.is_empty
		end

	build_help_menu
			-- Create and populate `help_menu'.
		require
			help_menu_not_yet_created: help_menu = Void
		local
			menu_item: EV_MENU_ITEM
		do
			create help_menu.make_with_text (Menu_help_item)

			create menu_item.make_with_text (Menu_help_contents_item)
				--| TODO: Add the action associated with "Contents and Index" here.
			help_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_help_about_item)
			menu_item.select_actions.extend (agent on_about)
			help_menu.extend (menu_item)

		ensure
			help_menu_created: help_menu /= Void and then not help_menu.is_empty
		end

feature {NONE} -- ToolBar Implementation

	standard_toolbar: EV_TOOL_BAR
			-- Standard toolbar for this window

	build_standard_toolbar
			-- Create and populate the standard toolbar.
		require
			toolbar_not_yet_created: standard_toolbar = Void
		local
			toolbar_item: EV_TOOL_BAR_BUTTON
			toolbar_pixmap: EV_PIXMAP
		do
				-- Create the toolbar.
			create standard_toolbar

			create toolbar_item
	--		create toolbar_pixmap
	--		toolbar_pixmap.set_with_named_file ("new.png")
	--		toolbar_item.set_pixmap (toolbar_pixmap)
			toolbar_item.set_text ("&New ...")
			standard_toolbar.extend (toolbar_item)

			create toolbar_item
	--		create toolbar_pixmap
	--		toolbar_pixmap.set_with_named_file ("open.png")
	--		toolbar_item.set_pixmap (toolbar_pixmap)
			toolbar_item.set_text ("&Open ...")
			standard_toolbar.extend (toolbar_item)

			create toolbar_item
	--		create toolbar_pixmap
	--		toolbar_pixmap.set_with_named_file ("save.png")
	--		toolbar_item.set_pixmap (toolbar_pixmap)
			toolbar_item.set_text ("&Save ...")
			standard_toolbar.extend (toolbar_item)
		ensure
			toolbar_created: standard_toolbar /= Void and then  not standard_toolbar.is_empty
		end

feature {NONE} -- StatusBar Implementation

	standard_status_bar: EV_STATUS_BAR
			-- Standard status bar for this window

	standard_status_label: EV_LABEL
			-- Label situated in the standard status bar.
			--
			-- Note: Call `standard_status_label.set_text (...)' to change the text
			--       displayed in the status bar.

	build_standard_status_bar
			-- Create and populate the standard toolbar.
		require
			status_bar_not_yet_created:
				standard_status_bar = Void and then
				standard_status_label = Void
		do
				-- Create the status bar.
			create standard_status_bar
			standard_status_bar.set_border_width (2)

				-- Populate the status bar.
			create standard_status_label.make_with_text ("Add your status text here...")
			standard_status_label.align_text_left
			standard_status_bar.extend (standard_status_label)
		ensure
			status_bar_created:
				standard_status_bar /= Void and then
				standard_status_label /= Void
		end

feature {NONE} -- About Dialog Implementation

	on_about
			-- Display the About dialog.
		local
			about_dialog: ABOUT_DIALOG
		do
			create about_dialog
			about_dialog.show_modal_to_window (Current)
		end

feature {NONE} -- Implementation, Close event

	request_close_window
			-- The user wants to close the window
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button.is_equal ((create {EV_DIALOG_CONSTANTS}).ev_ok) then
					-- Destroy the window
				destroy;

					-- End the application
					--| TODO: Remove this line if you don't want the application
					--|       to end when the first window is closed..
				(create {EV_ENVIRONMENT}).application.destroy
			end
		end

feature {NONE} -- Implementation

	main_container: EV_VERTICAL_SPLIT_AREA
			-- Main container (contains all widgets displayed in this window)

	root_tree: EV_TREE

	build_main_container
			-- Create and populate `main_container'.
		require
			main_container_not_yet_created: main_container = Void
		do
			create main_container
			create root_tree
			main_container.extend (root_tree)
	--		main_container.extend (create {EFB_TREEMAP})
		ensure
			main_container_created: main_container /= Void
		end

end
